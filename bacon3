#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname factorial -mnesia debug verbose
main([String]) ->
    Key = 'aaaaabbbbbabbbaabbababbaaababaab',
    Alphabet = 'abcdefghijklmnopqrstuvwxyz',
    io:format("String = ~p~n", [String]),
    try
        io:format("1~n", []),
        KA = create_proplist(Key, Alphabet, []),
        io:format("2~n", []),
        io:format("KA = ~w\n", [KA]),
        Out = input (String, []),
        io:format("3~n", []),
        io:format("Outstring = ~w\n", [Out]),
        create_word(Out, []),
        io:format("4~n", [])
    catch
        _:_ ->
            usage()
    end;
main(_) ->
    usage().

usage() ->
    io:format("usage: give me a  string!\n"),
    halt(1).

input ([], Acc) -> 
    io:format("Acc = ~p~n", [Acc]),
    lists:reverse(Acc);
input ([H|Tail], Acc) ->
    Asd =
        if H >= 65 andalso H =< 90 ->
                [98|Acc];
           H >= 97 andalso H =< 122 -> 
                [97|Acc];
           H == 32 -> 
                Acc;
           true -> {error,not_a_leter}
        end,
    input (Tail, Asd).


create_word([], Acc) -> Acc;
create_word([H1,H2,H3,H4,H5|Tail], Acc) ->
    io:format("word =  ~p, ~p, ~p, ~p, ~p~n", [H1, H2, H3, H4, H5]),
    Word = [H1,H2,H3,H4,H5],
    io:format("! ~p~n", [Word]),
    create_word(Tail, Acc).


create_proplist([], [], Res) -> Res;
create_proplist([H1,H2,H3,H4,H5|TKey], [Ha|TAlphabet], Res) ->
    io:format("Key = ~p,~p,~p,~p,~p,~p ~n", [H1,H2,H3,H4,H5,TKey]),
    io:format("Alphabet = ~p,~p~n", [Ha,TAlphabet]),
    Result = [{[H1,H2,H3,H4,H5], Ha}|Res],
    io:format("Result= ~p~n", [Result]),
    T = [H2,H3,H4,H5|TKey],
    create_proplist(T, TAlphabet, Result).

    
    
