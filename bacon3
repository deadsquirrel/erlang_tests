#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname factorial -mnesia debug verbose
main([String]) ->
    Key = "aaaaabbbbbabbbaabbababbaaababaab",
    Alphabet = "abcdefghijklmnopqrstuvwxyz",
    io:format("String = ~p~n", [String]),
    try
%% create proplist Key-Alphabet
%% {[Key], litera_of_alphabet}
%% {[97,97,97,97,97], 97}
        KA = create_proplist(Key, Key, Alphabet, [], [], 0),
        Out = input (String, []),
        create_word(Out, [], 0, KA, [])
    catch
        T:E ->
            io:format("Type: ~p, Exception: ~p~nStacktrace:~p~n",
                      [T, E, erlang:get_stacktrace()]),
            usage()
    end;
main(_) ->
    usage().

usage() ->
    io:format("usage: give me a  string!\n"),
    halt(1).

input ([], Acc) -> 
    lists:reverse(Acc);
input ([H|Tail], Acc) ->
    Asd =
        if H >= 65 andalso H =< 90 ->
                [98|Acc];
           H >= 97 andalso H =< 122 ->
                [97|Acc];
           H == 32 -> 
                Acc;
           true -> {error,not_a_leter}
        end,
    input (Tail, Asd).

create_word([], Acc, _, _KA, Dec) -> 
    Out = lists:reverse(Dec),
%% RESULT
    io:format("Out_word ~p~n", [Out]);
create_word([H|Tail], Acc, 4, KA, Dec) ->
    Word = [H|Acc],
%% call new fun check the conformity of proplist 5 simbols of decode simbols - new simbols
    Rev_Word = lists:reverse(Word),
    Decod = [decoder(KA, Rev_Word, [])|Dec],
    create_word(Tail, [], 0, KA, Decod);
create_word([H|Tail], Acc, C, _KA, Dec) ->
    Word = [H|Acc],
    create_word(Tail, Word, C+1, _KA, Dec).

create_proplist(_, _, [], Res, _List, _Count) -> lists:reverse(Res);
create_proplist([H1|_TKey], [_H|TailKey], [Ha|TAlphabet], Res, List1, 4) ->
    List2 = [H1|List1],
    Result = [{lists:reverse(List2), Ha}|Res],
    create_proplist(TailKey, TailKey, TAlphabet, Result, [], 0);
create_proplist([H1|TKey], Key, Alphabet, Res, List1, Count) ->
    List2 = [H1|List1],
    create_proplist(TKey, Key, Alphabet, Res, List2, Count+1).

decoder([], _Word, Out_sent) ->
    Out_sent;
decoder([{N,Head}|Tail_KA], Word, Out_sent) ->
    if N == Word ->
            OutLitera = Head;
       true -> 
            decoder(Tail_KA, Word, Out_sent)
    end.
